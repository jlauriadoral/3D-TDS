using Unity.Cinemachine;
using UnityEngine;

public class CameraManager : MonoBehaviour
{
    public static CameraManager instance;

    private CinemachineVirtualCamera cinemachineCamera;
    private CinemachineFollow followComponent;

    [Header("Camera Distance")]
    [SerializeField] private bool canChangeCameraDistance = true;
    [SerializeField] private float distanceChangeRate = 2f;
    private float targetCameraDistance;

    private void Awake()
    {
        if (instance == null)
            instance = this;
        else
        {
            Debug.LogWarning("More than one Camera Manager detected. Destroying duplicate.");
            Destroy(gameObject);
        }

        cinemachineCamera = GetComponentInChildren<CinemachineVirtualCamera>();
        if (cinemachineCamera != null)
        {
            followComponent = cinemachineCamera.GetComponent<CinemachineFollow>();
            if (followComponent == null)
            {
                Debug.LogError("CinemachineFollow component is missing on the Virtual Camera.");
            }
        }
        else
        {
            Debug.LogError("CinemachineVirtualCamera is missing.");
        }
    }

    private void Update()
    {
        UpdateCameraDistance();
    }

    private void UpdateCameraDistance()
    {
        if (!canChangeCameraDistance || followComponent == null)
            return;

        Vector3 currentOffset = followComponent.FollowOffset;
        float currentDistance = currentOffset.z;
        if (Mathf.Abs(targetCameraDistance - currentDistance) < 0.01f)
            return;

        float newDistance = Mathf.Lerp(currentDistance, targetCameraDistance, distanceChangeRate * Time.deltaTime);
        followComponent.FollowOffset = new Vector3(currentOffset.x, currentOffset.y, newDistance);
    }

    public void ChangeCameraDistance(float distance)
    {
        targetCameraDistance = distance;
    }
}
